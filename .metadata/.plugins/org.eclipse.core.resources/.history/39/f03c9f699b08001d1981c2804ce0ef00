package com.skillstorm.data;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArrayList;

import com.skillstorm.model.Employee;



public class EmployeeDao {
	
	List<Employee> data = new CopyOnWriteArrayList<>(); // write (ConcurrentModificationException)
	
	public EmployeeDao() throws SQLException, ClassNotFoundException {
		Class.forName("com.mysql.cj.jdbc.Driver");
		String url = "jdbc:mysql://localhost:3306/expensereimbursements";
		String username = "root";
		String password = "Newlife123";
		this.connection = DriverManager.getConnection(url, username, password);
		System.out.println("connection made to database");
	}

	/*public List<Employee> findAll(){
		return data;
	}*/
	
	public void add(Employee employee) {
		data.add(employee);
	}
	private Connection connection;

	
	// CRUD
	// Domain object - POJO/JavaBean that represents data for our app
	public Employee create(Employee employee) throws SQLException {
		String sql = "insert into expense(name, reason, notes) values (?,?,?)";				// flag: please return my keys
		PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
		statement.setString(1, employee.getName());
		statement.setString(2, employee.getReason());
		statement.setString(3, employee.getNotes());
		statement.executeUpdate();
		
		// grab the id - ResultSet = statement.getGeneratedKeys()
		ResultSet rs = statement.getGeneratedKeys(); // without the flag, this throws an exception
		rs.next();
		int generatedId = rs.getInt(1);
		employee.setId(generatedId);
		System.out.println("Employee created");
		return employee;
		
	}

	public Set<Employee> findAll() throws SQLException {
		// ResultSet
		Set<Employee> employees = new HashSet<Employee>(); // store the artists to be returned at the end
		String sql = "select employeeId, name, reason, notes from expense";

		Statement statement = connection.createStatement();
		ResultSet resultSet = statement.executeQuery(sql);
		while (resultSet.next()) {
			Employee row = new Employee();

			// extracted the value from the database table
			int id = resultSet.getInt("employeeId");
			String name = resultSet.getString("name");
			String reason = resultSet.getString("reason");
			String notes = resultSet.getString("notes");

			// store it in the Java object
			row.setId(id);
			row.setName(name);
			row.setNotes(notes);
			row.setReason(reason);

			employees.add(row);
		} //
		return employees;
	}

	public Employee findById(int id) throws SQLException {
		String sql = "select ArtistId, Name from Artist where ArtistId = ?";
		PreparedStatement statement = connection.prepareStatement(sql);
		statement.setInt(1, id);
		ResultSet rs = statement.executeQuery();
		if (rs.next()) {
			return new Employee(rs.getInt("ArtistId"), rs.getString("Name"));
		} else {
			return null;
		}
	}
	
	public boolean update(Employee employee) throws SQLException {
		String sql = "update expense set StatusId = ? where employeeId = ?";
		PreparedStatement statement = connection.prepareStatement(sql);
		statement.setInt(1, employee.getStatusId());
		statement.setInt(2, employee.getId());
		return statement.executeUpdate() == 1;
	}

	// Update & Delete, use an ID to change the right row
	public boolean delete(int id) throws SQLException {
		String sql = "delete from Artist where ArtistId = ?";
		PreparedStatement statement = connection.prepareStatement(sql);
		statement.setInt(1, id);
		return statement.executeUpdate() == 1;
	}

	
}
